// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/checking/checking.proto

package checking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckingClient is the client API for Checking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckingClient interface {
	GetBalance(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Balance, error)
}

type checkingClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckingClient(cc grpc.ClientConnInterface) CheckingClient {
	return &checkingClient{cc}
}

func (c *checkingClient) GetBalance(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/checking.Checking/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckingServer is the server API for Checking service.
// All implementations must embed UnimplementedCheckingServer
// for forward compatibility
type CheckingServer interface {
	GetBalance(context.Context, *Account) (*Balance, error)
	mustEmbedUnimplementedCheckingServer()
}

// UnimplementedCheckingServer must be embedded to have forward compatible implementations.
type UnimplementedCheckingServer struct {
}

func (UnimplementedCheckingServer) GetBalance(context.Context, *Account) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedCheckingServer) mustEmbedUnimplementedCheckingServer() {}

// UnsafeCheckingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckingServer will
// result in compilation errors.
type UnsafeCheckingServer interface {
	mustEmbedUnimplementedCheckingServer()
}

func RegisterCheckingServer(s grpc.ServiceRegistrar, srv CheckingServer) {
	s.RegisterService(&Checking_ServiceDesc, srv)
}

func _Checking_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckingServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checking.Checking/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckingServer).GetBalance(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

// Checking_ServiceDesc is the grpc.ServiceDesc for Checking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Checking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checking.Checking",
	HandlerType: (*CheckingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _Checking_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/checking/checking.proto",
}
